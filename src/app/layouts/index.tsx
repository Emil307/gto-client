"use client";

import type { Metadata } from "next";
import "../styles";
import { ColorSchemeScript, MantineProvider } from "@mantine/core";
import { theme } from "../../../theme";
import { roboto, rubik, TTSquare } from "../styles/fonts";
import { ModalsProvider, modals } from "@mantine/modals";
import { Toaster } from "react-hot-toast";
import { AuthProvider } from "../providers";
import { DatesProvider } from "@mantine/dates";
import "dayjs/locale/ru";
import "@mantine/core/styles.css";
import "@mantine/dates/styles.css";
import { addToHomeScreen } from "@telegram-apps/sdk";
import { useEffect } from "react";
import WebApp from "@twa-dev/sdk";
import { usePathname, useRouter } from "next/navigation";
import * as Sentry from "@sentry/nextjs";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const router = useRouter();
  const pathname = usePathname();

  const handleClose = () => {
    modals.openConfirmModal({
      title: "Закрытие приложения",
      children: "Вы действительно хотите закрыть приложение?",
      labels: { confirm: "Да, закрыть", cancel: "Отмена" },
      onConfirm: () => {
        if (typeof window !== "undefined") {
          if (WebApp) {
            WebApp.close();
          }
        }
      },
      centered: true,
    });
  };

  if (addToHomeScreen.isAvailable()) {
    addToHomeScreen();
  }

  useEffect(() => {
    if (typeof window !== "undefined") {
      // Проверяем, доступен ли Telegram Web App
      if (WebApp) {
        // Расширяем приложение на весь экран
        WebApp.expand();

        // Добавляем обработчик закрытия WebApp
        WebApp.onEvent("viewportChanged", () => {
          if (!WebApp.isExpanded) {
            handleClose();
            WebApp.expand();
          }
        });

        const isPDFPage = location.pathname.includes("pdf");

        if (isPDFPage) {
          WebApp.BackButton.show();
          return;
        }

        if (!isPDFPage) {
          WebApp.BackButton.hide();
          return;
        }
      }
    }
  }, [pathname]);

  if (typeof window !== "undefined") {
    const tg = WebApp;
    tg.ready();

    tg.headerColor = "#000430";
    tg.backgroundColor = "#000430";

    const BackButton = tg.BackButton;

    BackButton.show();
    BackButton.onClick(() => router.back());
  }

  useEffect(() => {
    if (process.env.NODE_ENV === "production") {
      // Перехватываем все ошибки в консоли
      const originalConsoleError = console.error;
      console.error = (...args) => {
        Sentry.captureMessage(args.join(" "), "error");
        originalConsoleError(...args); // Выводим в консоль
      };

      const originalConsoleWarn = console.warn;
      console.warn = (...args) => {
        Sentry.captureMessage(args.join(" "), "warning");
        originalConsoleWarn(...args); // Выводим в консоль
      };

      return () => {
        // Восстанавливаем оригинальные функции при размонтировании компонента
        console.error = originalConsoleError;
        console.warn = originalConsoleWarn;
      };
    }
  }, []);

  return (
    <html lang="ru" suppressHydrationWarning>
      <head>
        <ColorSchemeScript />
        <meta
          name="viewport"
          content="minimum-scale=1.0, maximum-scale=1.0, initial-scale=1.0, width=device-width, user-scalable=0"
        />
        <meta name="theme-color" content="#000430" />
      </head>
      <body
        className={`${roboto.variable} ${rubik.variable} ${TTSquare.variable} antialiased`}
      >
        <MantineProvider theme={theme}>
          <DatesProvider
            settings={{
              locale: "ru",
              firstDayOfWeek: 0,
              timezone: "UTC",
            }}
          >
            <ModalsProvider>{children}</ModalsProvider>
          </DatesProvider>
          <AuthProvider />
          <Toaster position="top-right" />
        </MantineProvider>
      </body>
    </html>
  );
}
